generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "mysql"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

enum PalpiteResultado {
  PENDING
  GREEN
  RED
}

model User {
  id                    Int                @id @default(autoincrement())
  email                 String             @unique
  password              String
  role                  Role               @default(USER)
  subscriptionStatus    SubscriptionStatus @default(INACTIVE)
  subscriptionExpiresAt DateTime?
  criadoEm              DateTime           @default(now())
  apostasFeitas         ApostaFeita[] // Adicionei isso de volta do seu schema anterior, pois é crucial
}

model Palpite {
  id            Int              @id @default(autoincrement())
  esporte       String           @default("Futebol")
  competicao    String
  jogo          String
  dataHora      DateTime
  palpite       String
  link          String
  criadoEm      DateTime         @default(now())
  oddpesquisada Float? // ALTERADO: Renomeado de 'odds' para 'oddpesquisada'
  // REMOVIDO: confianca Int?
  // REMOVIDO: analise   String?  @db.Text
  resultado     PalpiteResultado @default(PENDING)
  placar        String?
  seguidoPor    ApostaFeita[] // Adicionei isso de volta do seu schema anterior, pois é crucial
}

// RESTAURADO: Este modelo ApostaFeita é fundamental para os lucros/prejuízos
model ApostaFeita {
  id            Int       @id @default(autoincrement())
  valorApostado Float
  resultadoPNL  Float?    // Adicionado para registrar o lucro/prejuízo
  data          DateTime  @default(now())
  usuarioId     Int
  palpiteId     Int
  usuario       User      @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  palpite       Palpite   @relation(fields: [palpiteId], references: [id], onDelete: Cascade)
  @@unique([usuarioId, palpiteId]) // Garante que um usuário não siga o mesmo palpite duas vezes
}